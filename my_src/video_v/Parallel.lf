target C {
    timeout: 2 sec,
    //workers: 4 // change to 4 to see speed up
}

reactor Source {
    timer t(0, 200 msec);
    output out:int;
    state s:int=0;
    reaction(t) -> out {=
        SET(out, self->s);
        self->s++;
    =}
}

reactor TakeTime {
    input in:int;
    output out:int;
    reaction(in) -> out {=
        struct timespec sleep_time = { (time_t) 0, (long)200000000 };
        struct timespec remaining_time;
        nanosleep(&sleep_time, &remaining_time);
        int offset = 0;
        for (int i=0; i < 100000000; i++) {
            offset++;
        }
        SET(out,in->value + offset);
    =}

}

reactor Destination(width:int=4) {
    state s:int=400000000;
    input[width] in:int;
    reaction(in) {=
        int sum=0;
        for (int i =0; i < in_width; i++) {
            sum += in[i]->value;
        }
        printf("Sum of received: %d.\n", sum);
    =}
}

main reactor Parallel(width:int=4) {
    a = new Source();
    t = new[width] TakeTime();
    b = new Destination(width=width);
    (a.out)+ -> t.in;
    t.out -> b.in;
}